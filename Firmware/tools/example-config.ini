#[general]
#second_usb_serial_enable = false # This enables a second USB serial port
#uart0.baud_rate = 115200 # Baud rate for the default hardware ( UART ) serial port
#play_led_disable = true             # Disable the play led
#grbl_mode = true           # set for partial grbl compatibility mode

[motion control]
default_feed_rate = 4000 # Default speed (mm/minute) for G1/G2/G3 moves
default_seek_rate = 4000 # Default speed (mm/minute) for G0 moves
mm_per_arc_segment = 0.0 # Fixed length for line segments that divide arcs, 0 to disable
mm_max_arc_error = 0.01 # The maximum error for line segments that divide arcs 0 to disable
arc_correction = 5
default_acceleration = 3000 # Acceleration in mm/second/second.
junction_deviation = 0.05 # See http://smoothieware.org/motion-control#junction-deviation
default_acceleration = 100.0 # default acceleration in mm/sec²
arm_solution = delta
x_axis_max_speed = 30000 # Maximum speed in mm/min
y_axis_max_speed = 30000 # Maximum speed in mm/min
z_axis_max_speed = 300 # Maximum speed in mm/min

[planner]
junction_deviation = 0.05
#z_junction_deviation = 0.0
minimum_planner_speed = 0
planner_queue_size = 32

[actuator]
common.motor_reset_pin = GPIO3_5 # reset pin for all drivers

alpha.steps_per_mm = 80 # Steps per mm for alpha ( X ) stepper
alpha.step_pin = 2.0 # Pin for alpha stepper step signal
alpha.dir_pin = 0.5 # Pin for alpha stepper direction, add '!' to reverse direction
alpha.en_pin = 0.4 # Pin for alpha enable pin
alpha.max_rate = 30000.0 # Maximum rate in mm/min

beta.steps_per_mm = 80 # Steps per mm for beta ( Y ) stepper
beta.step_pin = 2.1 # Pin for beta stepper step signal
beta.dir_pin = 0.11 # Pin for beta stepper direction, add '!' to reverse direction
beta.en_pin = 0.10 # Pin for beta enable
beta.max_rate = 30000.0 # Maxmimum rate in mm/min

gamma.steps_per_mm = 1600 # Steps per mm for gamma ( Z ) stepper
gamma.step_pin = 2.2 # Pin for gamma stepper step signal
gamma.dir_pin = 0.20 # Pin for gamma stepper direction, add '!' to reverse direction
gamma.en_pin = 0.19 # Pin for gamma enable
gamma.max_rate = 300.0 # Maximum rate in mm/min
gamma.acceleration = 500  # overrides the default acceleration for this axis

# Delta is first extruder, we set common stuff here instead of in extruder section
delta.steps_per_mm = 140        # Steps per mm for extruder stepper
delta.step_pin = gpio3_0        # Pin for extruder step signal
delta.dir_pin = gpio3_3         # Pin for extruder dir signal ( add '!' to reverse direction )
delta.en_pin = gpio7_6          # Pin for extruder enable signal
delta.ms1_pin = gpio7_5         # Pin for delta micro stepping
delta.ms2_pin = gpio3_2         # Pin for delta micro stepping
delta.ms3_pin = gpio3_4         # Pin for delta micro stepping
delta.acceleration = 500        # Acceleration for the stepper motor mm/sec²
delta.max_rate = 3000.0           # Maximum rate in mm/min

[pwm]
frequency=10000        # PWM frequency in Hz

[current control]
alpha.control = pwm  # type of control (pwm is default for v2 mini)
#alpha.control = spi  # type of control (spi is used for v2 pro)
alpha.current  = 1.5 # X stepper motor current
beta.current   = 1.5 # Y stepper motor current
gamma.current  = 1.5 # Z stepper motor current
delta.current  = 1.5 # First extruder stepper motor current
alpha.pin      = P7.4   # PWM pin for alpha channel
beta.pin       = PB.2   # PWM pin for beta channel
gamma.pin      = PB.3   # PWM pin for gamma channel
delta.pin      = PB.1   # PWM pin for delta channel

[laser]
enable = false # Whether to activate the laser module at all
pwm_pin = P2.7 # This pin will be PWMed to control the laser.
#inverted_pwm = false # set to true for an inverted PWM (1-0)
#ttl_pin = P1.30  # This pin turns on when the laser turns on, and off when the laser turns off.
#maximum_power = 1.0 # This is the maximum duty cycle that will be applied to the laser
#minimum_power = 0.0 # This is a value just below the minimum duty cycle that keeps the laser active without actually burning.
#default_power = 0.8 # This is the default laser power that will be used for cuts if a power has not been specified.  The value is a scale between the maximum and minimum power levels specified above
#maximum_s_value = 1.0 # the maximum S can be set to

[endstops]
# NOTE only a min or a max homing endstop maybe defined
minx.enable = true             # enable an endstop
minx.pin = 1.24             # pin
minx.homing_direction = home_to_min      # direction it moves to the endstop
minx.homing_position = 0                # the cartesian coordinate this is set to when it homes
minx.axis = X                # the axis designator
minx.max_travel = 500              # the maximum travel in mm before it times out
minx.fast_rate = 50               # fast homing rate in mm/sec
minx.slow_rate = 25               # slow homing rate in mm/sec
minx.retract = 5                # bounce off endstop in mm

# uncomment for homing to max and comment the minx above
#maxx.enable = true             # enable an endstop
#maxx.pin = 1.25             # pin
#maxx.homing_direction = home_to_max      # direction it moves to the endstop
#maxx.homing_position = 200              # the cartesian coordinate this is set to when it homes
#maxx.axis = X                # the axis designator
#maxx.max_travel = 500              # the maximum travel in mm before it times out
#maxx.fast_rate = 50               # fast homing rate in mm/sec
#maxx.slow_rate = 25               # slow homing rate in mm/sec
#maxx.retract = 5                # bounce off endstop in mm

miny.enable = true             # enable an endstop
miny.pin = 1.26             # pin
miny.homing_direction = home_to_min      # direction it moves to the endstop
miny.homing_position = 0                # the cartesian coordinate this is set to when it homes
miny.axis = Y                # the axis designator
miny.max_travel = 500              # the maximum travel in mm before it times out
miny.fast_rate = 50               # fast homing rate in mm/sec
miny.slow_rate = 25               # slow homing rate in mm/sec
miny.retract = 5                # bounce off endstop in mm

# uncomment for homing to max and comment the min above
#maxy.enable = true             # enable an endstop
#maxy.pin = 1.27             # pin
#maxy.homing_direction = home_to_max      # direction it moves to the endstop
#maxy.homing_position = 200              # the cartesian coordinate this is set to when it homes
#maxy.axis = Y                # the axis designator
#maxy.max_travel = 500              # the maximum travel in mm before it times out
#maxy.fast_rate = 50               # fast homing rate in mm/sec
#maxy.slow_rate = 25               # slow homing rate in mm/sec
#maxy.retract = 5                # bounce off endstop in mm

minz.enable = true             # enable an endstop
minz.pin = 1.28             # pin
minz.homing_direction = home_to_min      # direction it moves to the endstop
minz.homing_position = 0                # the cartesian coordinate this is set to when it homes
minz.axis = Z                # the axis designator
minz.max_travel = 100              # the maximum travel in mm before it times out
minz.fast_rate = 10               # fast homing rate in mm/sec
minz.slow_rate = 2                # slow homing rate in mm/sec
minz.retract = 5                # bounce off endstop in mm

# uncomment for homing to max and comment the min above
#maxz.enable = true             # enable an endstop
#maxz.pin = 1.29             # pin
#maxz.homing_direction = home_to_max      # direction it moves to the endstop
#maxz.homing_position = 200              # the cartesian coordinate this is set to when it homes
#maxz.axis = Z                # the axis designator
#maxz.max_travel = 100              # the maximum travel in mm before it times out
#maxz.fast_rate = 10               # fast homing rate in mm/sec
#maxz.slow_rate = 2                # slow homing rate in mm/sec
#maxz.retract = 5                # bounce off endstop in mm

# optional enable limit switches, actions will stop if any enabled limit switch is triggered
#minx.limit_enable = false            # set to true to enable the limit on this endstop
#miny.limit_enable = false            # set to true to enable the limit on this endstop
#minz.limit_enable = false            # set to true to enable the limit on this endstop

# also define the pin needed and the Axis designator if limit on a max pin not defined above
#maxx.enable = true             # enable an endstop
#maxx.pin = 1.25             # pin
#maxx.limit_enable = true             # set to true to enable the limit on this endstop
#maxx.axis = X                # the axis designator

# OPTIONAL uncomment for homing the A axis to min
#mina.enable = true             # enable an endstop
#mina.pin = 1.29             # pin
#mina.homing_direction = home_to_min      # direction it moves to the endstop
#mina.homing_position = 200              # the cartesian coordinate this is set to when it homes
#mina.axis = A                # the axis designator
#mina.max_travel = 100              # the maximum travel in mm before it times out
#mina.fast_rate = 10               # fast homing rate in mm/sec
#mina.slow_rate = 2                # slow homing rate in mm/sec
#mina.retract = 5                # bounce off endstop in mm

# type of machine
common.corexy_homing = false            # set to true if homing on a hbot or corexy

# optional order in which axis will home, default is they all home at the same time,
# if this is set it will force each axis to home one at a time in the specified order
common.homing_order = XYZ              # x axis followed by y then z last
common.move_to_origin_after_home = false            # move XY to 0,0 after homing
common.endstop_debounce_ms = 1                # uncomment if you get noise on your endstops, default is 1 millisecond debounce
common.home_z_first = true             # uncomment and set to true to home the Z first, otherwise Z homes after XY

[extruder]
hotend.enable = true             # Whether to activate the extruder module at all. All configuration is ignored if false
hotend.tool_id = 0               # T0 will select

# Second extruder module configuration
hotend2.enable = true            # Whether to activate the extruder module at all. All configuration is ignored if false
hotend.tool_id = 1               # T1 will select

hotend2.x_offset = 0             # x offset from origin in mm
hotend2.y_offset = 25.0          # y offset from origin in mm
hotend2.z_offset = 0             # z offset from origin in mm

[temperature control]
hotend.enable = true             # Whether to activate this ( "hotend" ) module at all.
hotend.tool_id = 0               # T0 will select
hotend.thermistor_pin = P7.5     # Pin for the thermistor to read
hotend.heater_pin = P2.7         # Pin that controls the heater, set to nc if a readonly thermistor is being defined
hotend.thermistor = EPCOS100K    # See http://smoothieware.org/temperaturecontrol#toc5
hotend.set_m_code = 104          # M-code to set the temperature for this module
hotend.set_and_wait_m_code = 109 # M-code to set-and-wait for this module
hotend.designator = T            # Designator letter for this module

hotend2.enable = true             # Whether to activate this ( "hotend" ) module at all.
hotend2.tool_id = 1               # T1 will select
hotend2.thermistor_pin = P7.4     # Pin for the thermistor to read
hotend2.heater_pin = P2.7         # Pin that controls the heater, set to nc if a readonly thermistor is being defined
hotend2.thermistor = EPCOS100K    # See http://smoothieware.org/temperaturecontrol#toc5
hotend2.set_m_code = 104          # M-code to set the temperature for this module
hotend2.set_and_wait_m_code = 109 # M-code to set-and-wait for this module
hotend2.designator = T            # Designator letter for this module

bed.enable = true # Whether to activate this ( "hotend" ) module at all.
bed.thermistor_pin = 0.24 # Pin for the thermistor to read
bed.heater_pin = 2.5 # Pin that controls the heater
bed.thermistor = Honeywell100K # See http://smoothieware.org/temperaturecontrol#thermistor
bed.set_m_code = 140 # M-code to set the temperature for this module
bed.set_and_wait_m_code = 190 # M-code to set-and-wait for this module
bed.designator = B # Designator letter for this module

[temperature switch]
# See http://smoothieware.org/temperatureswitch
# Automatically toggle a switch at a specified temperature. Different ones of these may be defined to monitor different temperatures and switch different swithxes
# Useful to turn on a fan or water pump to cool the hotend
hotend.enable = true            #
hotend.designator = T               # first character of the temperature control designator to use as the temperature sensor to monitor
hotend.switch = fan            # select which switch to use, matches the name of the defined switch
hotend.threshold_temp = 60.0            # temperature to turn on (if rising) or off the switch
hotend.heatup_poll = 15              # poll heatup at 15 sec intervals
hotend.cooldown_poll = 60              # poll cooldown at 60 sec intervals

[switch]
fan.enable = false # Enable this module
fan.input_on_command = M106 # Command that will turn this switch on
fan.input_off_command = M107 # Command that will turn this switch off
fan.output_pin = 2.6 # Pin this module controls
fan.output_type = pwm # PWM output settable with S parameter in the input_on_comand

misc.enable = false             # Enable this module
misc.input_on_command = M42              # Command that will turn this switch on
misc.input_off_command = M43              # Command that will turn this switch off
misc.output_pin = 2.4              # Pin this module controls
misc.output_type = digital          # Digital means this is just an on or off pin

led1.enable            = true
led1.input_on_command  = M1
led1.input_off_command = M2
led1.output_pin        = gpio1_0
led1.output_type       = digital

led2.enable            = true
led2.input_on_command  = M3
led2.input_off_command = M4
led2.output_pin        = gpio3_3
led2.output_type       = sigmadeltapwm

but1.enable             = true                     # Enable this module
but1.input_pin          = gpio0_7!                 # button
but1.output_on_command  = M1                       # command to send
but1.output_off_command = M2                       # command to send
but1.input_pin_behavior = toggle


[zprobe]
enable = false # Set to true to enable a zprobe
probe_pin = 1.28!^ # Pin probe is attached to, if NC remove the !
slow_feedrate = 5 # Mm/sec probe feed rate
fast_feedrate = 100 # Move feedrate mm/sec
probe_height = 5 # How much above bed to start probe
leveling = three point # leveling strategy to use
#leveling = delta grid  # leveling strategy to use
#calibration = delta  # calibration strategy to use

[three point leveling strategy]
# Example for 3-point levelling strategy, see wiki documentation for other strategies
point1 = 100.0,0.0   # the first probe point (x,y) optional may be defined with M557
point2 = 200.0,200.0 # the second probe point (x,y)
point3 = 0.0,200.0   # the third probe point (x,y)
home_first = true        # home the XY axis before probing
tolerance = 0.03        # the probe tolerance in mm, anything less that this will be ignored, default is 0.03mm
probe_offsets = 0,0,0       # the probe offsets from nozzle, must be x,y,z, default is no offset
save_plane = false       # set to true to allow the bed plane to be saved with M500 default is false

[delta calibration strategy]
# Example for the delta calibration strategy
radius = 100             # the probe radius
initial_height = 10    # Height at which to start probling

[delta grid leveling strategy]
# Example for the delta grid leveling strategy
radius = 50            # Grid radius in millimeters
size = 7               # Grid size, must be an odd number
do_home = true         # Whether to home before calibration
save = true            # Whether to automatically save the grid
initial_height = 10    # Height at which to start probling

[panel]
enable = false # Set to true to enable the panel code
# Example for reprap discount GLCD
# on glcd EXP1 is to left and EXP2 is to right, pin 1 is bottom left, pin 2 is top left etc.
# +5v is EXP1 pin 10, Gnd is EXP1 pin 9
lcd = reprap_discount_glcd     #
spi_channel = 0                 # SPI channel to use  ; GLCD EXP1 Pins 3,5 (MOSI, SCLK)
spi_cs_pin = 0.16              # SPI chip select     ; GLCD EXP1 Pin 4
encoder_a_pin = 3.25!^            # Encoder pin         ; GLCD EXP2 Pin 3
encoder_b_pin = 3.26!^            # Encoder pin         ; GLCD EXP2 Pin 5
click_button_pin = 1.30!^            # Click button        ; GLCD EXP1 Pin 2
buzz_pin = 1.31              # Pin for buzzer      ; GLCD EXP1 Pin 1
back_button_pin = 2.11!^            # Back button         ; GLCD EXP2 Pin 8

menu_offset = 0 # Some panels will need 1 here
alpha_jog_feedrate = 6000 # X jogging feedrate in mm/min
beta_jog_feedrate = 6000 # Y jogging feedrate in mm/min
gamma_jog_feedrate = 200 # Z jogging feedrate in mm/min
hotend_temperature = 185 # Temp to set hotend when preheat is selected
bed_temperature = 60 # Temp to set bed when preheat is selected

[custom_menu]
power_on.enable = true #
power_on.name = Power on #
power_on.command = M80 #
power_off.enable = true #
power_off.name = Power off #
power_off.command = M81 #

[network]
enable = false # Enable the ethernet network services
webserver.enable = true # Enable the webserver
telnet.enable = true # Enable the telnet server
ip_address = auto # Use dhcp to get ip address
# Uncomment the 3 below to manually setup ip address
#ip_address = 192.168.3.222   # The IP address
#ip_mask = 255.255.255.0   # The ip mask
#ip_gateway = 192.168.3.1     # The gateway address
#mac_override = xx.xx.xx.xx.xx.xx  # Override the mac address, only do this if you have a conflict

[kill button]
enable = true          # Set to true to enable a kill button
pin = p2.7             # Kill button pin.
toggle_enable = false  # set to true to make it a toggle button (like an estop)
unkill_enable = true   # enable kill button hold for 2 seconds does unkill


